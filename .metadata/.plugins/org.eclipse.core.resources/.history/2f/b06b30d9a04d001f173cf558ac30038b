package base;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import io.appium.java_client.AppiumBy;
import io.appium.java_client.AppiumDriver;

public class BaseClass {
    protected static AppiumDriver driver; 
    protected static AppiumDriver driver1;
    public static String rideOTP = null;
    
    @Test(priority = 0)
    @Parameters({"flow"})
    public void prerequisite(String flowOption) {
        System.setProperty("flowOption", flowOption);  // Set the flowOption as a system property
        int userDevice = 0, driverDevice = 0;
        Scanner userInput = new Scanner(System.in);

        switch (Integer.parseInt(flowOption)) {
            case 1:
                System.out.println("Select the device from the below options for user Application");
                deviceNames();
                userDevice = userInput.nextInt();
                break;
            case 2:
                System.out.println("Select the device from the below options for driver Application");
                deviceNames();
                driverDevice = userInput.nextInt();
                break;
            case 3:
                System.out.println("Select the device from the below options for user Application");
                deviceNames();
                userDevice = userInput.nextInt();
                System.out.println("Select the device from the below options for driver Application");
                deviceNames();
                driverDevice = userInput.nextInt();
                break;
            default:
                System.out.println("Invalid flow option selected. Please select a valid option.");
                return;
        }

        // Validate and set device configurations
        setDeviceConfiguration(userDevice, driverDevice);
    }

    public static void deviceNames() {
        System.out.println("\n1. Samsung A51"
                + "\n2. Iqoo Z5"
                + "\n3. Realme RMX2117"
                + "\n4. Vivo Y21"
                + "\n5. Google Pixel 6a");
    }

    private static void setDeviceConfiguration(int userDevice, int driverDevice) {
        if (userDevice != 0) {
            switch (userDevice) {
                case 1:
                    System.setProperty("userDeviceName", "Samsung A51");
                    System.setProperty("userUdid", "RZ8N91FWYXT");
                    break;
                case 2:
                    System.setProperty("userDeviceName", "Iqoo Z5");
                    System.setProperty("userUdid", "1371785921000CT");
                    break;
                case 3:
                    System.setProperty("userDeviceName", "Realme RMX2117");
                    System.setProperty("userUdid", "SONJFMDUKV65OJV4");
                    break;
                case 4:
                    System.setProperty("userDeviceName", "Vivo Y21");
                    System.setProperty("userUdid", "1377682723004YR");
                    break;
                case 5:
                    System.setProperty("userDeviceName", "Google Pixel 6a");
                    System.setProperty("userUdid", "28301JEGR03129");
                    break;
                default:
                    throw new IllegalArgumentException("Invalid user device selection.");
            }
        }

        if (driverDevice != 0) {
            switch (driverDevice) {
                case 1:
                    System.setProperty("driverDeviceName", "Samsung A51");
                    System.setProperty("driverUdid", "RZ8N91FWYXT");
                    break;
                case 2:
                    System.setProperty("driverDeviceName", "Iqoo Z5");
                    System.setProperty("driverUdid", "1371785921000CT");
                    break;
                case 3:
                    System.setProperty("driverDeviceName", "Realme RMX2117");
                    System.setProperty("driverUdid", "SONJFMDUKV65OJV4");
                    break;
                case 4:
                    System.setProperty("driverDeviceName", "Vivo Y21");
                    System.setProperty("driverUdid", "1377682723004YR");
                    break;
                case 5:
                    System.setProperty("driverDeviceName", "Google Pixel 6a");
                    System.setProperty("driverUdid", "28301JEGR03129");
                    break;
                default:
                    throw new IllegalArgumentException("Invalid driver device selection.");
            }
        }
    }

    @Test(priority = 1)
    public void setUp() throws MalformedURLException {
        try {
            String driverDeviceName = System.getProperty("driverDeviceName");
            String driverUdid = System.getProperty("driverUdid");
            String userDeviceName = System.getProperty("userDeviceName");
            String userUdid = System.getProperty("userUdid");
            String flowOptionStr = System.getProperty("flowOption");
            
            if (flowOptionStr == null) {
                throw new IllegalArgumentException("flowOption property is not set.");
            }

            int flowOption = Integer.parseInt(flowOptionStr);

            URL url = new URL("http://0.0.0.0:4723/wd/hub/");

            if (flowOption == 2 || flowOption == 3) {
                // Driver
                System.out.println("Setting the capabilities of the Driver Application and Driver app Installation is in Progress");
                DesiredCapabilities cap = new DesiredCapabilities();
                cap.setCapability("platformName", "Android");
                cap.setCapability("platformVersion", "13");
                cap.setCapability("deviceName", driverDeviceName);
                cap.setCapability("udid", driverUdid);
                cap.setCapability("automationName", "UiAutomator2");
                cap.setCapability("newCommandTimeout", 300);
                cap.setCapability("app", "/Users/sumedh.kp/eclipse-workspace/NammaYatriAutomation/movingTech.NY/Resources/app-nyDriver-prod-debug.apk");
                driver = new AppiumDriver(url, cap);
                driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
                System.out.println("Launched the Driver Application");
            }

            if (flowOption == 1 || flowOption == 3) {
                // User
                System.out.println("Setting the capabilities of the User Application and User app Installation is in Progress");
                DesiredCapabilities cap1 = new DesiredCapabilities();
                cap1.setCapability("platformName", "Android");
                cap1.setCapability("platformVersion", "13");
                cap1.setCapability("deviceName", userDeviceName);
                cap1.setCapability("udid", userUdid);
                cap1.setCapability("automationName", "UiAutomator2");
                cap1.setCapability("newCommandTimeout", 300);
                cap1.setCapability("app", "/Users/sumedh.kp/eclipse-workspace/NammaYatriAutomation/movingTech.NY/Resources/app-nyUser-prod-debug.apk");
                driver1 = new AppiumDriver(url, cap1);
                driver1.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
                System.out.println("Launched the User Application");
            }
        } catch (Exception exp) {
            System.out.println("Cause is: " + exp.getCause());
            System.out.println("Message is: " + exp.getMessage());
            exp.printStackTrace();
        }
    }

    public void scrollToText(String text) {
        driver.findElement(
            new AppiumBy.ByAndroidUIAutomator("new UiScrollable(new UiSelector().scrollable(true).instance(0))"
                + ".scrollIntoView(new UiSelector()" + ".textMatches(\"" + text + "\").instance(0))"));
    }

    @AfterSuite
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
        if (driver1 != null) {
            driver1.quit();
        }
    }
}
